<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Products - BizPro POS</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50">
    <nav class="bg-gradient-to-r from-[#123d94] to-[#1e4cad] shadow-lg">
        <div class="px-4 mx-auto max-w-7xl sm:px-6 lg:px-8">
            <div class="flex items-center h-20">
                <div class="flex items-center flex-1 space-x-8">
                    <a href="/dashboard" class="flex items-center px-3 py-2 text-white rounded-lg hover:bg-white/10 transition-colors">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                        </svg>
                        <span class="ml-2 font-medium">Dashboard</span>
                    </a>
                    <div class="h-6 w-px bg-white/20"></div>
                    <a href="/products"><h1 class="text-2xl font-bold text-white">Products Management</h1></a>
                </div>
                
                <div class="flex items-center gap-6">
                    <div class="flex items-center max-w-md gap-4">
                        <div class="relative">
                            <input type="text" 
                                   id="searchInput"
                                   placeholder="Search products..." 
                                   class="w-64 pl-10 pr-4 py-2 bg-white/10 text-white placeholder-white/60 border border-white/20 rounded-lg focus:outline-none focus:border-white/40">
                            <svg class="absolute left-3 top-2.5 h-5 w-5 text-white/60" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                            </svg>
                        </div>
                        <select id="categoryFilter" 
                                class="w-48 px-4 py-2 bg-white/10 text-white border border-white/20 rounded-lg focus:outline-none focus:border-white/40">
                            <option value="all" class="text-gray-900">All Categories</option>
                            <option value="Foodstuff" class="text-gray-900">Foodstuff</option>
                            <option value="Drinks & Beverages" class="text-gray-900">Drinks & Beverages</option>
                            <option value="Household & cleaning" class="text-gray-900">Household & cleaning</option>
                            <option value="Beauty & Personal care" class="text-gray-900">Beauty & Personal care</option>
                            <option value="School & office" class="text-gray-900">School & office</option>
                            <option value="Pharmaceuticals" class="text-gray-900">Pharmaceuticals</option>
                            <option value="Others" class="text-gray-900">Others</option>
                        </select>
                    </div>
                    
                    <button onclick="openAddModal()" 
                            class="px-5 py-2.5 text-sm font-medium text-white bg-[#ff7403] rounded-lg hover:bg-[#ff8a33] transition-colors flex items-center gap-2">
                        <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                        </svg>
                        Add Product
                    </button>
                </div>
            </div>
        </div>
    </nav>

    <main >
        <div class="bg-white rounded-lg shadow">
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead class="bg-gray-100">
                        <tr>
                            <th class="px-6 py-3 text-xs font-medium tracking-wider text-left text-[#123d94] uppercase">Product ID</th>
                            <th class="px-6 py-3 text-xs font-medium tracking-wider text-left text-[#123d94] uppercase">Product Name</th>
                            <th class="px-6 py-3 text-xs font-medium tracking-wider text-left text-[#123d94] uppercase">Category</th>
                            <th class="px-6 py-3 text-xs font-medium tracking-wider text-right text-[#123d94] uppercase">Unit Price</th>
                            <th class="px-6 py-3 text-xs font-medium tracking-wider text-right text-[#123d94] uppercase">Stock</th>
                            <th class="px-6 py-3 text-xs font-medium tracking-wider text-left text-[#123d94] uppercase">Supplier</th>
                            <th class="px-6 py-3 text-xs font-medium tracking-wider text-center text-[#123d94] uppercase">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200">
                        <% products.forEach(product => { %>
                        <tr class="hover:bg-gray-50">
                            <td class="px-6 py-4 text-sm text-gray-500"><%= String(product.product_id).padStart(4, '0') %></td>
                            <td class="px-6 py-4 text-sm font-medium text-gray-900"><%= product.product_name %></td>
                            <td class="px-6 py-4">
                                <span class="px-2 py-1 text-xs font-medium text-[#123d94] bg-blue-100 rounded-full">
                                    <%= product.category %>
                                </span>
                            </td>
                            <td class="px-6 py-4 text-sm text-gray-500 text-right font-mono">
                                <%= Number(product.unit_price).toLocaleString('en-US', {
                                    minimumFractionDigits: 2,
                                    maximumFractionDigits: 2,
                                    useGrouping: true
                                }) %>
                            </td>
                            <td class="px-6 py-4 text-sm text-gray-500 text-right font-mono">
                                <%= Number(product.quantity_in_stock).toLocaleString('en-US', {
                                    minimumFractionDigits: 0,
                                    maximumFractionDigits: 0,
                                    useGrouping: true
                                }) %>
                            </td>
                            <td class="px-6 py-4 text-sm text-gray-500"><%= product.supplier %></td>
                            <td class="px-6 py-4 text-sm text-center">
                                <button onclick="editProduct('<%= product.product_id %>')" class="text-[#123d94] hover:text-[#eb2907]">Edit</button>
                                <button onclick="deleteProduct('<%= product.product_id %>')" class="ml-4 text-[#eb2907] hover:text-[#ff7403]">Delete</button>
                            </td>
                        </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>

            <div class="px-6 py-4 border-t border-gray-200">
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <p class="text-sm text-gray-700">
                            Showing page <%= currentPage %> of <%= totalPages %>
                        </p>
                    </div>
                    <div class="flex items-center space-x-2">
                        <% if (hasPrevPage) { %>
                            <a href="/products?page=<%= currentPage - 1 %>&search=<%= search %>&category=<%= category %>" 
                               class="px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                                Previous
                            </a>
                        <% } %>
                        
                        <% for(let i = 1; i <= totalPages; i++) { %>
                            <a href="/products?page=<%= i %>&search=<%= search %>&category=<%= category %>"
                               class="px-3 py-2 text-sm font-medium <%= currentPage === i ? 'bg-[#123d94] text-white border-[#123d94]' : 'text-gray-700 bg-white border-gray-300' %> border rounded-md hover:bg-gray-50">
                                <%= i %>
                            </a>
                        <% } %>
                        
                        <% if (hasNextPage) { %>
                            <a href="/products?page=<%= currentPage + 1 %>&search=<%= search %>&category=<%= category %>"
                               class="px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                                Next
                            </a>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Add Product Modal -->
    <div id="addProductModal" class="fixed inset-0 z-10 hidden overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
        <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
            <div class="relative inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                <form action="/products" method="POST" onsubmit="return validateForm()">
                    <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                        <div class="space-y-4">
                            <div>
                                <label class="block text-sm font-medium text-[#123d94]">Product Name</label>
                                <input type="text" name="product_name" required class="mt-1 block w-full border border-blue-200 rounded-md shadow-sm p-2">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-[#123d94]">Category</label>
                                <select name="category" required class="mt-1 block w-full border border-blue-200 rounded-md shadow-sm p-2">
                                    <option value="">Select a category</option>
                                    <option value="Foodstuff">Foodstuff</option>
                                    <option value="Drinks & Beverages">Drinks & Beverages</option>
                                    <option value="Household & cleaning">Household & cleaning supplies</option>
                                    <option value="Beauty & Personal care">Beauty & Personal care</option>
                                    <option value="School & office">School & office</option>
                                    <option value="Pharmaceuticals">Pharmaceuticals</option>
                                    <option value="Others">Others</option>
                                </select>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-[#123d94]">Unit Price</label>
                                <div class="relative mt-1">
                                    <input 
                                        type="text" 
                                        name="unit_price" 
                                        required 
                                        class="block w-full border border-blue-200 rounded-md shadow-sm p-2 font-mono"
                                        onkeyup="formatNumber(this, 0)"
                                        onblur="formatNumber(this, 0)">
                                </div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-[#123d94]">Quantity in Stock</label>
                                <input 
                                    type="text" 
                                    name="quantity_in_stock" 
                                    required 
                                    class="mt-1 block w-full border border-blue-200 rounded-md shadow-sm p-2 font-mono"
                                    onkeyup="formatNumber(this, 0)"
                                    onblur="formatNumber(this, 0)">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-[#123d94]">Supplier</label>
                                <input type="text" name="supplier" required class="mt-1 block w-full border border-blue-200 rounded-md shadow-sm p-2">
                            </div>
                        </div>
                    </div>
                    <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                        <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-[#123d94] text-base font-medium text-white hover:bg-blue-700 sm:ml-3 sm:w-auto sm:text-sm">Add Product</button>
                        <button type="button" onclick="closeAddModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-[#123d94] shadow-sm px-4 py-2 bg-white text-base font-medium text-blue-900 hover:bg-gray-50 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        let searchTimeout;
        let currentPage = 1;

        // Function to update the products table
        function updateProductsTable(data) {
            const tbody = document.querySelector('tbody');
            tbody.innerHTML = '';

            data.products.forEach(product => {
                const row = `
                    <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4 text-sm text-gray-500">${String(product.product_id).padStart(4, '0')}</td>
                        <td class="px-6 py-4 text-sm font-medium text-gray-900">${product.product_name}</td>
                        <td class="px-6 py-4">
                            <span class="px-2 py-1 text-xs font-medium text-[#123d94] bg-blue-100 rounded-full">
                                ${product.category}
                            </span>
                        </td>
                        <td class="px-6 py-4 text-sm text-gray-500 text-right font-mono">
                            ${Number(product.unit_price).toLocaleString('en-US', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                                useGrouping: true
                            })}
                        </td>
                        <td class="px-6 py-4 text-sm text-gray-500 text-right font-mono">
                            ${Number(product.quantity_in_stock).toLocaleString('en-US', {
                                minimumFractionDigits: 0,
                                maximumFractionDigits: 0,
                                useGrouping: true
                            })}
                        </td>
                        <td class="px-6 py-4 text-sm text-gray-500">${product.supplier}</td>
                        <td class="px-6 py-4 text-sm text-center">
                            <button onclick="editProduct('${product.product_id}')" class="text-[#123d94] hover:text-[#eb2907]">Edit</button>
                            <button onclick="deleteProduct('${product.product_id}')" class="ml-4 text-[#eb2907] hover:text-[#ff7403]">Delete</button>
                        </td>
                    </tr>
                `;
                tbody.insertAdjacentHTML('beforeend', row);
            });

            // Update pagination
            updatePagination(data);
        }

        // Function to update pagination
        function updatePagination(data) {
            const paginationContainer = document.querySelector('.flex.items-center.space-x-2');
            let paginationHTML = '';

            if (data.hasPrevPage) {
                paginationHTML += `
                    <button onclick="changePage(${data.currentPage - 1})" 
                            class="px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                        Previous
                    </button>
                `;
            }

            for (let i = 1; i <= data.totalPages; i++) {
                paginationHTML += `
                    <button onclick="changePage(${i})"
                            class="px-3 py-2 text-sm font-medium ${data.currentPage === i ? 'bg-[#123d94] text-white border-[#123d94]' : 'text-gray-700 bg-white border-gray-300'} border rounded-md hover:bg-gray-50">
                        ${i}
                    </button>
                `;
            }

            if (data.hasNextPage) {
                paginationHTML += `
                    <button onclick="changePage(${data.currentPage + 1})"
                            class="px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                        Next
                    </button>
                `;
            }

            paginationContainer.innerHTML = paginationHTML;

            // Update page counter
            document.querySelector('.text-sm.text-gray-700').textContent = 
                `Showing page ${data.currentPage} of ${data.totalPages}`;
        }

        // Function to fetch products
        async function fetchProducts(page = 1) {
            const searchValue = document.getElementById('searchInput').value;
            const categoryValue = document.getElementById('categoryFilter').value;
            
            try {
                const response = await fetch(`/products/api/search?page=${page}&search=${searchValue}&category=${categoryValue}`);
                const data = await response.json();
                updateProductsTable(data);
                currentPage = page;
            } catch (error) {
                console.error('Error:', error);
            }
        }

        // Function to change page
        function changePage(page) {
            fetchProducts(page);
        }

        // Add event listeners for real-time search and filter
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('searchInput');
            const categoryFilter = document.getElementById('categoryFilter');

            // Real-time search with debounce
            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    currentPage = 1;
                    fetchProducts(currentPage);
                }, 300);
            });

            // Real-time category filter
            categoryFilter.addEventListener('change', function() {
                currentPage = 1;
                fetchProducts(currentPage);
            });
        });

        function openAddModal() {
            document.getElementById('addProductModal').classList.remove('hidden');
        }

        function closeAddModal() {
            document.getElementById('addProductModal').classList.add('hidden');
        }

        async function deleteProduct(id) {
            if (confirm('Are you sure you want to delete this product?')) {
                try {
                    const response = await fetch(`/products/${id}`, {
                        method: 'DELETE',
                    });
                    
                    if (response.ok) {
                        window.location.reload();
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            }
        }

        function editProduct(id) {
            // Implement edit functionality
            alert('Edit functionality to be implemented');
        }

        function formatNumber(input, decimals) {
            // Remove all characters except digits and decimal point
            let value = input.value.replace(/[^\d.]/g, '');
            
            // Ensure only one decimal point
            let parts = value.split('.');
            if (parts.length > 2) {
                parts = [parts[0], parts.slice(1).join('')];
            }
            
            // Format the integer part with thousand separators
            if (parts[0].length > 0) {
                parts[0] = parseInt(parts[0]).toLocaleString('en-US');
            }
            
            // Handle decimals if needed
            if (decimals > 0) {
                if (parts.length > 1) {
                    parts[1] = parts[1].slice(0, decimals);
                } else if (input === document.activeElement) {
                    // Only add decimal part if input is focused
                    parts[1] = '0'.repeat(decimals);
                }
            }

            // Combine the parts
            input.value = parts.join('.');
        }

        function validateForm() {
            const priceInput = document.querySelector('input[name="unit_price"]');
            const stockInput = document.querySelector('input[name="quantity_in_stock"]');
            
            // Convert formatted strings back to numbers for submission
            priceInput.value = parseFloat(priceInput.value.replace(/,/g, '')).toFixed(2);
            stockInput.value = parseInt(stockInput.value.replace(/,/g, ''));
            
            return true;
        }

        // Add input event listeners to format on paste
        document.addEventListener('DOMContentLoaded', function() {
            const numericInputs = document.querySelectorAll('input[name="unit_price"], input[name="quantity_in_stock"]');
            numericInputs.forEach(input => {
                input.addEventListener('paste', function(e) {
                    setTimeout(() => formatNumber(this, this.name === 'unit_price' ? 2 : 0), 0);
                });
            });
        });
    </script>
</body>
</html>